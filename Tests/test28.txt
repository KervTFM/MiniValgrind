#begin

// Merge sort
// recursive merge sort doesn't work because MiniValgrind doesn't support call stack

global {
    arr A[8];
    A[0] = 22; A[1] = 5; A[2] = 6;
    A[3] = 3; A[4] = 10; A[5] = 7;
    A[6] = 15; A[7] = 1;
    arr B[8];
}

int min(int x, int y) {
    if (x > y) {
        return y;
    }
    return x;
}

int merging(int low, int mid, int high) {
   int l1 = low;
   int l2 = mid + 1;
   int i;
   for (i = low; (l1 <= mid) && (l2 <= high); i++;) {
      if (A[l1] <= A[l2]) {
         B[i] = A[l1++];
      }
      else {
         B[i] = A[l2++];
      }
   }

   while (l1 <= mid) {
      B[i++] = A[l1++];
   }

   while (l2 <= high) {
      B[i++] = A[l2++];
   }

   for (i = low; i <= high; i++;) {
      A[i] = B[i];
   }
}

int mergeSort(int n) {
   int curr_size;
   int left_start;
   for (curr_size = 1; curr_size <= n-1; curr_size = 2 * curr_size;) {
       for (left_start = 0; left_start < n-1; left_start = left_start + 2 * curr_size;) {
           int mid = left_start + curr_size - 1;
           int right_end = min(left_start + 2*curr_size - 1, n-1);
           merging(left_start, mid, right_end);
       }
   }
}


int main() {
    int size = 8;
    mergeSort(size);
    print(A);
    return 0;
}
// answer: [1, 3, 5, 6, 7, 10, 15, 22]
#end