#begin

// Narayana's algorithm generating next permutation

int factorial(int n) {
    int res = 1;
    for (int i = 2; i <= n; i++;) {
        res = res * i;
    }
    return res;
}

arr NarayanaNextPerm(arr perm, int n) {
    int i; int j; int k; int t; int tmp;
    k = n - 2;
    while ((k >= 0) && (perm[k] >= perm[k + 1])) {
        k--;
    }

    if (k == -1) {
        return 0;
    }
    t = n - 1;
    while (perm[k] >= perm[t]) {
        t--;
    }

    tmp = perm[k];
    perm[k] = perm[t];
    perm[t] = tmp;

    i = k + 1;
    for (j = n - 1; i < j; j--;) {
        tmp = perm[i];
        perm[i] = perm[j];
        perm[j] = tmp;
        i++;
    }
    return perm;
}

int main() {
    int len = 3;
    arr perm[3];
    for (int i = 0; i < len; i++;) { perm[i] = i+1; }
    print(perm);
    for (int i = 0; i < factorial(len) - 1; i++;) {
        perm = NarayanaNextPerm(perm, len);
        print(perm);
    }
    return 0;
}
// answer: [1, 2, 3]\n[1, 3, 2]\n[2, 1, 3]\n[2, 3, 1]\n[3, 1, 2]\n[3, 2, 1]
#end